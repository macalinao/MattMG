/**
 * bukkit-bootstrap (c) 2013-2014 Ian Macalinao
 */
import org.yaml.snakeyaml.Yaml
import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'java'
apply plugin: 'signing'
apply plugin: 'maven'

// Plugin information loaded from the YML file
ext.plugin = (new Yaml()).load(new FileInputStream(new File(projectDir, "src/main/resources/plugin.yml")))

// Determine the group/artifact
ext.pkg = plugin.main.substring(0, plugin.main.lastIndexOf('.'))

// Our group/artifact ids. Version is declared in the main file
group = pkg.substring(0, pkg.lastIndexOf('.'))
archivesBaseName = plugin.name.toLowerCase()
version = project.version

buildscript {
  repositories {
    mavenCentral()
    jcenter()
  }

  dependencies {
    classpath 'org.yaml:snakeyaml:1.5'
    classpath 'org.gradle.api.plugins:gradle-nexus-plugin:0.7.1'
  }
}

repositories {
  mavenCentral()
  maven {
    url 'http://repo.md-5.net/content/groups/public/'
  }
}

dependencies {
  compile 'org.bukkit:bukkit:1.7.9-R0.3-SNAPSHOT'
  compile fileTree(dir: 'libs', includes: ['*.jar']) 
}

processResources {
  from('src/main/resources') {
    include '*'
    filter { String line ->
      line.replace('$version', 'v' + cmd('git describe --always --dirty=-dirty'))
    }
  }
}

/**
 * Executes a command and returns its output.
 */
def cmd(str) {
  try {
    def output = new ByteArrayOutputStream()
    exec {
      commandLine str.split(' ')
      standardOutput = output
    }
    return output.toString().trim()
  }
  catch (ignored) {
    return null;
  }
}

/**
 * Scaffolds the Bukkit project.
 */
task scaffold << {
  // Make artifact source directory
  def mainClass = plugin.main.substring(plugin.main.lastIndexOf('.') + 1, plugin.main.length())
  def artifactPath = new File('src/main/java/' + plugin.main.replace('.', '/')).getAbsolutePath()
  def artifactSrcDir = new File(artifactPath.substring(0, artifactPath.lastIndexOf(File.separator)))
  artifactSrcDir.mkdirs()

  // Copy plugin bootstrap file over
  copy {
    from 'bootstrap/'
    into artifactSrcDir.getPath()
    include 'PluginBootstrap.java'
    rename '.*', plugin.name + '.java'

    filter(ReplaceTokens, tokens: [pkg: pkg, pluginName: mainClass])
  }

  if ((cmd('git remote -v') =~ /origin.+?bukkit-bootstrap\.git/).find()) {
    cmd('git remote rename origin bukkit-bootstrap')
  }

  delete {
    delete 'README.md'
  }
}

task testCopy << {
  cmd("mkdir -p $testPluginDir")
  cmd("cp $projectDir/build/${plugin.name}.jar $testPluginDir")
}

task remoteCopy << {
  cmd("scp $projectDir/build/${plugin.name}.jar $remotePluginDir")
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.0'
}

task copyPlugin(type: Copy) {
  description 'Copy resulting JAR to a nice plugin name'
  dependsOn 'build'

  description 'Copies the plugin from the libs/ directory into the main build directory.'
  from 'build/libs/'
  into 'build/'
  include jar.archiveName
  rename jar.archiveName, plugin.name + '.jar'
}

// Publishing stuff
task javadocJar(type: Jar) {
  classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
  classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
  archives javadocJar, sourcesJar
}

signing {
  sign configurations.archives
}

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment {
        MavenDeployment deployment -> signing.signPom(deployment)
      }

      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      pom.project {
        name plugin.name
        packaging 'jar'
        description plugin.description
        url plugin.url
      }
    }
  }
}
